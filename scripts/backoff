import sys
import telnetlib
import argparse
import logging
import backoff

ROOT = logging.getLogger()
ROOT.setLevel(logging.INFO)

HANDLER = logging.StreamHandler(sys.stdout)
HANDLER.setLevel(logging.INFO)
FORMATTER = logging.Formatter('%(asctime)s:%(name)s:%(levelname)s: %(message)s')
HANDLER.setFormatter(FORMATTER)
ROOT.addHandler(HANDLER)


DESCRIPTION = """Backoff until all ports ready"""

def main():
    """Script entry point.

    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-p', '--port',
                        help='Backoff port number until ready',
                        required=True)
    parser.add_argument('-d', '--detail',
                        default='Service',
                        help='Meaningful description for backoff port')
    parser.add_argument('host',
                        default='localhost',
                        help='Connection host')

    args = parser.parse_args()

    _backoff(args.host, args.port, args.detail)


@backoff.on_exception(backoff.constant, (EOFError, ConnectionRefusedError), max_time=300, interval=5)
def _backoff(host, port, description=None):
    """Service backoff until ready.

    """
    msg = f'Checking host:port {host}:{port}'
    if description:
        msg += f' {description}'

    logging.info(f'{msg} ...')

    with telnetlib.Telnet(host, int(port)) as tn:
        tn.set_debuglevel(5)
        tn.read_until(b' ', 1)
        logging.info(f'Port {port} ready')


if __name__ == "__main__":
    main()
