{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Makester","text":"<p>Makester is aimed to be a centralised, reusable tool kit for tasks that you use regularly in your projects. Makester was inspired by Modern Make and created in response to a proliferation of disjointed Makefiles. These accumulated over the years and eventually became hard to maintain. Now, projects can follow a consistent infrastructure management pattern that is version controlled and easy to use. Pin to a particular Makester release and ensure consistency across your projects.</p> <p>Makester can fill the void as an Integrated Developer Platform that provides a consistent tooling framework that is used throughout all of your coding projects and does not lock you into cloud provider's managed services. Avoid re-inventing the wheel and just focus on your problem domain.</p> <p>If you use Python, Docker or Kubernetes daily then Makester can help you.</p>"},{"location":"#why-use-makester","title":"Why Use Makester?","text":"<ul> <li>No need to install anything, unless you want to use the optional Makester subsystems, such as   MicroK8s or   Minikube. You will need to install those   binaries yourself.</li> <li>Lightweight. It's just GNU <code>make</code>.</li> <li>Simplifies your CI/CD pipelines. Long, unwieldy commands can be abstracted by a <code>make</code> target.   For example, <code>make image-build</code>.</li> <li>Simplify repetitive tasks with short, easy to remember <code>make</code> commands. For example, <code>make tests</code>   (which I further alias to <code>mt</code>, as I run it a million times a day ...)</li> <li>Makester does not intend to tell you how you should do things. It's just there to help you   work common and repetitive tasks. If something you need is missing, then feel free to add a target   or, even create a new <code>Makefile</code> and share.</li> </ul>"},{"location":"#where-do-i-start","title":"Where do I start?","text":"<p>Check out the Getting started page.</p> <p>top</p>"},{"location":"faqs/","title":"FAQs","text":""},{"location":"faqs/#how-do-i-upgrade-makester","title":"How do I upgrade Makester?","text":"<p>Use the Makester primer tool in upgrade mode:</p> <p>```sh Makester upgrade sh $HOME/.makester/tools/install.sh --upgrade <pre><code>Prior to [Makester v0.2.6](https://github.com/loum/makester/releases/tag/0.2.6) you will first need\nto sync the Makester `git` submodule:\n\n```sh\nmake submodule-update\n</code></pre></p>"},{"location":"faqs/#why-is-the-default-make-on-macos-so-old","title":"Why is the default <code>make</code> on macOS so old?","text":"<p>Apple seems to have an issue with licensing around GNU products: more specifically to the terms of the GPLv3 licence agreement. It is unlikely that Apple will provide current versions of utilities that are bound by the GPLv3 licensing constraints.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installing-makester-in-standalone-mode","title":"Installing Makester in standalone mode","text":"<p>Makester is installed by running one of the following commands in your terminal. You can install this via the command-line with either <code>curl</code>, <code>wget</code> or another similar tool.</p> Method Command curl <code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/loum/makester/main/tools/install.sh)\"</code> wget <code>sh -c \"$(wget -O- https://raw.githubusercontent.com/loum/makester/main/tools/install.sh)\"</code> fetch <code>sh -c \"$(fetch -o - https://raw.githubusercontent.com/loum/makester/main/tools/install.sh)\"</code>"},{"location":"getting-started/#integrating-makester-into-a-new-project","title":"Integrating Makester into a new project","text":"<p>Begin by assigning your new project name to the <code>MAKESTER__PRIMER_PROJECT_NAME</code>. This will eventually be assigned to the MAKESTER__PROJECT_NAME Makester variable. The following example uses the primer project name <code>supa-idea</code>:</p> <pre><code>export MAKESTER__PRIMER_PROJECT_NAME=supa-idea\n</code></pre> <p>Prime your new project repository:</p> <pre><code>mkdir $MAKESTER__PRIMER_PROJECT_NAME &amp;&amp; cd $_ &amp;&amp; git init &amp;&amp; git commit -m \"initial commit\" --allow-empty\n</code></pre> <p>Next, prepare your <code>Makefile</code>. The <code>Makefile</code> will feature targets that can help you get things done. Select a scenario from below.</p>"},{"location":"getting-started/#brand-new-generic-project","title":"Brand new generic project","text":"<p>For a generic project, or if you want the most minimal <code>Makefile</code> simply to get you started:</p> <pre><code>make -f ~/.makester/Makefile makester-minimal\n</code></pre> <p>Should should be able to access your project's help:</p> <pre><code>make help\n</code></pre> <p>You can now evolve your <code>Makefile</code> to suit your project needs.</p>"},{"location":"getting-started/#brand-new-python-project","title":"Brand new Python project","text":"<p>Makester tooling can provide opionionated scaffolding for common components of a Python coding project.</p> Initialise Python project boilerplate.<pre><code>make -f ~/.makester/Makefile py-proj-makefile &amp;&amp; make py-proj-primer &amp;&amp; make init-dev\n</code></pre>"},{"location":"getting-started/#what-just-happened","title":"What just happened?","text":"<p>Makester takes care of the of the Python project scaffolding for you. You now have the basic boilerplate for a new Python coding project and can start work immediately on your problem domain. This includes:</p> <ul> <li>src-layout   based on Packaging Python Projects.</li> <li>A sane, <code>.gitignore</code>, MIT license   coverage and a basic <code>README.md</code>.</li> <li>Documentation scaffolding. More details on how to evolve the documentation suite.</li> <li>Pylint configuration. More targeted configuration options for linting.</li> <li>mypy for code type annotation and black   for code formatting are ready to go. See make py-check.</li> <li>Placeholder for a project CLI that defaults to the <code>MAKESTER__PROJECT_NAME</code>. For our <code>supa-idea</code> project, this can be   invoked with <code>venv/bin/supa_idea --help</code> to render the following output:   <pre><code>Usage: supa_idea [OPTIONS]\n\nScript entry point.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></li> <li>Dynamic versioning.</li> </ul>"},{"location":"getting-started/#existing-project","title":"Existing project","text":"<p>If you already have a <code>Makefile</code>, then just include Makester:</p> <pre><code>#\n# Makester overrides.\n#\nMAKESTER__STANDALONE := true\n\ninclude $(HOME)/.makester/makefiles/makester.mk\n</code></pre>"},{"location":"getting-started/#maintenance","title":"Maintenance","text":"<p>Keep up-to-date with Makester:</p> <pre><code>sh $HOME/.makester/tools/install.sh --upgrade\n</code></pre> <p>top</p>"},{"location":"macos/","title":"Extras for macOS","text":""},{"location":"macos/#upgrading-gnu-make-macos","title":"Upgrading GNU Make (macOS)","text":"<p>Although the macOS machines provide a working GNU <code>make</code> it is too old to support the Makester capabilities. Instead, it is recommended to upgrade to the GNU make version provided by Homebrew. Detailed instructions can be found at the Homebrew make formulae. In short, to upgrade GNU make run:</p> <pre><code>brew install make\n</code></pre> <p>The <code>make</code> utility installed by Homebrew can be accessed by <code>gmake</code>. The Homebrew make formulae notes suggest how you can update your local <code>PATH</code> to use <code>gmake</code> as <code>make</code>. Alternatively, alias <code>make</code>:</p> <pre><code>alias make=gmake\n</code></pre>"},{"location":"recipes/","title":"Recipes","text":"<p>Warning</p> <p>Don't forget to indent your <code>Makefile</code> targets with the <code>&lt;tab&gt;</code> character.</p>"},{"location":"recipes/#utilities","title":"Utilities","text":""},{"location":"recipes/#integrate-makester-backoff-with-docker-compose","title":"Integrate <code>makester backoff</code> with <code>docker compose</code>","text":"<p>The following recipe defines a backoff strategy with <code>docker compose</code> in addition to adding an action to run the initialisation script, <code>init-script.sh</code>:</p> <pre><code>backoff:\n    @makester backoff localhost 10000 --detail \"HiveServer2\"\n    @makester backoff localhost 10002 --detail \"Web UI for HiveServer2\"\n\nlocal-build-up: compose-up backoff\n    @./init-script.sh\n</code></pre>"},{"location":"recipes/#docker","title":"Docker","text":""},{"location":"recipes/#multi-arch-builds","title":"Multi-arch builds","text":"<p>As you may have noticed, multi-architecture builds can be somewhat of a grind. This recipe creates a new target called <code>multi-arch-build</code> that will:</p> <ul> <li>creates a new <code>buildx builder</code> called <code>multiarch</code> and selects that for use</li> <li>starts the local image registry</li> <li>builds image with multi-architecture support and publishes to the local registry server</li> <li>shifts the new multi-architecture image from the local registry server into docker</li> </ul> Multi-arch container image builds.<pre><code>image-pull-into-docker:\n    $(info ### Pulling local registry image $(MAKESTER__SERVICE_NAME):$(HASH) into docker)\n    $(MAKESTER__DOCKER) pull $(MAKESTER__SERVICE_NAME):$(HASH)\n\nimage-tag-in-docker: image-pull-into-docker\n    $(info ### Tagging local registry image $(MAKESTER__SERVICE_NAME):$(HASH) for docker)\n    $(MAKESTER__DOCKER) tag $(MAKESTER__SERVICE_NAME):$(HASH) $(MAKESTER__STATIC_SERVICE_NAME):$(HASH)\n\nimage-transfer: image-tag-in-docker\n    $(info ### Deleting pulled local registry image $(MAKESTER__SERVICE_NAME):$(HASH))\n    $(MAKESTER__DOCKER) rmi $(MAKESTER__SERVICE_NAME):$(HASH)\n\nmulti-arch-build: image-registry-start image-buildx-builder\n    $(info ### Starting multi-arch builds ...)\n    $(MAKE) MAKESTER__DOCKER_PLATFORM=linux/arm64,linux/amd64 image-buildx\n    $(MAKE) image-transfer\n    $(MAKE) image-registry-stop\n</code></pre>"},{"location":"recipes/#docker-compose","title":"Docker compose","text":""},{"location":"recipes/#provide-multiple-docker-compose-updown-targets","title":"Provide Multiple <code>docker compose</code> <code>up</code>/<code>down</code> Targets","text":"<p>Override <code>MAKESTER__COMPOSE_FILES</code> Makester parameter to customise multiple build/destroy environments:</p> <pre><code>test-compose-up: MAKESTER__COMPOSE_FILES = -f docker-compose.yml -f docker-compose-test.yml\ntest-compose-up: compose-up\n\ndev-compose-up: MAKESTER__COMPOSE_FILES = -f docker-compose.yml -f docker-compose-dev.yml\ndev-compose-up: compose-up\n</code></pre> <p>Note</p> <p>Remember to provide the complimentary <code>docker compose</code> <code>down</code> targets in your <code>Makefile</code>.</p>"},{"location":"recipes/#versioning","title":"Versioning","text":""},{"location":"recipes/#release-branch-and-tagging","title":"Release branch and tagging","text":"<p>Makester v0.2.3</p> <p>The sample GitVersion.yml now includes a dedicated <code>release</code> section that caters for <code>release</code> branches. This allows you to version increment main-line releases independent from your main-line branch. This mitigates the need to make changes directly to your <code>main</code> branch. For example:</p> Preparing for release.<pre><code>git checkout main\ngit checkout -b release\nmake gitversion-release\n</code></pre> <p>The <code>gitversion release</code> will update your <code>VERSION</code> file in accordance with your main-line version incremental rules.</p> <p>Here is a sample GitHub action that creates a tag and pre-release when the <code>VERSION</code> file change has been detected. It is based on <code>makester</code>'s versioning strategy and the excellent marvinpinto/action-automatic-releases action:</p> VERSION file action for automatic releases<pre><code>name: Makester CI\nrun-name: ${{ github.actor }} ${{ github.event_name }} event Makester CI \ud83d\ude80\non: push\npermissions:\n  contents: write\n\njobs:\n  pre-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          fetch-depth: 0\n      - name: Check if the VERSION file has changed\n        id: changed_version_file\n        uses: tj-actions/changed-files@v35\n        with:\n          files: src/makester/VERSION\n      - name: Read VERSION file\n        if: steps.changed_version_file.outputs.any_changed == 'true'\n        id: get_version\n        run: echo \"VERSION=$(cat src/makester/VERSION)\" &gt;&gt; $GITHUB_OUTPUT\n      - name: Create pre-release\n        if: steps.changed_version_file.outputs.any_changed == 'true'\n        uses: \"marvinpinto/action-automatic-releases@latest\"\n        with:\n          repo_token: \"${{ secrets.GITHUB_TOKEN }}\"\n          title: ${{ steps.get_version.outputs.version }}\n          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}\n          prerelease: true\n</code></pre> <p>top</p>"},{"location":"utilities/","title":"Utilities","text":""},{"location":"utilities/#getting-started","title":"Getting started","text":"<p>The Makester utilities provide reuseable tooling across all of your projects.</p> <p>Note</p> <p>Makester follows the Cross-Desktop Group specification by installing the <code>makester</code> utility into <code>$HOME/.local/bin</code>.</p>"},{"location":"utilities/#makester-usage","title":"<code>makester</code> usage","text":"makester usage message.<pre><code>\u2514&gt; makester\nUsage: makester [OPTIONS] COMMAND [ARGS]...\n\n Makester CLI tool\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --quiet          Disable logs to screen (to log level \"ERROR\")                                   \u2502\n\u2502 --help           Show this message and exit.                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 backoff       Wait until dependent service is ready.                                             \u2502\n\u2502 templater     Template against environment variables or optional JSON values.                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"utilities/#makester-backoff","title":"<code>makester backoff</code>","text":"<p>Makester v0.1.4</p> <p><code>src/waitster.py</code> was refactored into the <code>makester backoff</code> CLI in Makester v0.1.4.</p> <p>Wait until dependent service is ready:</p> <pre><code>makester backoff --help\n</code></pre> makester backoff usage message.<pre><code> Usage: makester backoff [OPTIONS] HOST PORT\n\n Wait until dependent service is ready.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    host      TEXT     Host name of service connection. [required]                              \u2502\n\u2502 *    port      INTEGER  Service port number. [required]                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --detail  -d      TEXT  Meaningful description for backoff port [default: Service]               \u2502\n\u2502 --help                  Show this message and exit.                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p><code>makester backoff</code> will poll <code>port</code> for 300 seconds before a time out error is reported.</p>"},{"location":"utilities/#makester-backoff-example","title":"<code>makester backoff</code> Example","text":"<p>Start listening on a port:</p> <pre><code>nc -l 19999\n</code></pre> <p>Poll the port:</p> <pre><code>makester backoff localhost 19999 --detail \"- Just a port check\"\n</code></pre> Backoff polling port 19999 for service readiness.<pre><code>Checking host:port localhost:19999 - Just a port check ...\nServer is accepting connection requests \ud83d\ude80\n</code></pre>"},{"location":"utilities/#makester-templater","title":"<code>makester templater</code>","text":"<p>Makester v0.1.4</p> <p><code>src/templatester.py</code> was refactored into the <code>makester templater</code> CLI in Makester v0.1.4.</p> <p>Template against environment variables or optional JSON values (<code>--mapping</code> switch):</p> <pre><code>makester templater --help\n</code></pre> makester templater usage message.<pre><code>\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    template      TEXT  Path to Jinja2 template (absolute, or relative to user home) [required] \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --filter   -f      TEXT  Environment variable filter (ignored when mapping is taken from JSON    \u2502\n\u2502                          file)                                                                   \u2502\n\u2502 --mapping  -m      TEXT  path to JSON mappings (absolute, or relative to user home)              \u2502\n\u2502 --write    -w            Write out templated file alongside Jinja2 template                      \u2502\n\u2502 --help                   Show this message and exit.                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p><code>makester templater</code> takes a file path as defined by the <code>template</code> positional argument and renders the template against target variables. The variables can be specified as a JSON document defined by <code>--mapping</code>.</p> <p>The <code>template</code> files needs to end with a <code>.j2</code> extension. If the <code>--write</code> switch is provided, then the generated content will be output to the <code>template</code> path less the <code>.j2</code> extension.</p> <p>A special custom filter <code>env_override</code> is available to bypass <code>MAPPING</code> values and source the environment for variable substitution. Use the custom filter <code>env_override</code> in your template as follows:</p> <pre><code>\"test\" : {{ \"default\" | env_override('CUSTOM') }}\n</code></pre> <p>Provided an environment variable as been set:</p> <pre><code>export CUSTOM=some_value\n</code></pre> <p>The template will render:</p> <pre><code>test: some_value\n</code></pre> <p>Otherwise:</p> <pre><code>test: default\n</code></pre>"},{"location":"utilities/#makester-templater-example","title":"<code>makester templater</code> Example","text":"<p>Create the Jinja2 template:</p> <pre><code>cat &lt;&lt; EOF &gt; my_template.j2\nThis is my CUSTOM variable value: {{ CUSTOM }}\nEOF\n</code></pre> <p>Template!</p> <pre><code>CUSTOM=bananas makester --quiet templater my_template.j2\n</code></pre> makester templater example output.<pre><code>This is my CUSTOM variable value: bananas\n</code></pre> <p>top</p>"},{"location":"makefiles/argocd/","title":"Argo CD","text":"<p>Makester v0.2.4</p> <p>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.</p>"},{"location":"makefiles/argocd/#getting-started","title":"Getting started","text":"<p>If managing <code>Makefile</code> includes manually, you must append <code>microk8s</code> and <code>argocd</code> to <code>MAKESTER__INCLUDES</code> to enable the Makester Argo CD subsystem.</p> <p>Argo CD needs to be deployed into a Kubernetes cluster. As such, Start by checking the MicroK8s status:</p> MicroK8s status should be in the 'running' state.<pre><code>make microk8s-status\n</code></pre> <p>Follow the prompts to start MicroK8s, or refer to the Makester <code>microk8s</code> subsystem documentation for further information on how to install MicroK8s.</p> <p>To get an Argo CD instance deployed onto MicroK8s with minimal fuss:</p> <pre><code>make argocd-up\n</code></pre> <p>On successful completion of the target, you will be provided with the URL to the Argo CD API server and the login credentials. For example:</p> <pre><code>...\n### Waiting for argocd-server pod in argocd namespace to be ready ...\n2023-04-10 21:48:46 logga [INFO]: Checking host:port 192.168.1.127:20443 Argo CD API server ...\n2023-04-10 21:48:47 logga [INFO]: Port 20443 ready\n### Argo CD API Server address forwarded to: https://192.168.1.127:20443\n### Argo CD API Server log output can be found at /home/lupco/dev/makester/.makester/argocd-dashboard.out\n### Login to the Argo CD API Server as user \"admin\" with following password:\nbT9jKItiqd3tmSfY\n</code></pre> <p></p> <p>Enter the credentials to land on the main Argo CD applications page: </p> <p>A sample web app can be deployed to demonstrates how to enable a service with Argo CD:</p> <pre><code>make argocd-example\n</code></pre> <p>You can interact with the app deployment via the Argo CD applications page: </p> <p>To remove the sample app:</p> <pre><code>make argocd-example-del\n</code></pre> <p>To clean up all resources:</p> <pre><code>make argocd-down\n</code></pre>"},{"location":"makefiles/argocd/#command-reference","title":"Command reference","text":""},{"location":"makefiles/argocd/#login-to-the-argo-cd-cli","title":"Login to the Argo CD CLI","text":"<p>Use the password generated with the <code>argocd-creds</code> target.</p> <pre><code>make argocd-cli-login \n</code></pre>"},{"location":"makefiles/argocd/#dump-the-argo-cd-credentials-in-plain-text","title":"Dump the Argo CD credentials in plain-text","text":"<pre><code>make argocd-creds\n</code></pre> <p>Sample output:</p> Sample Argo CD credentials.<pre><code>### Login to the Argo CD API Server as user \"admin\" with following password:\nbT9jKItiqd3tmSfY\n</code></pre>"},{"location":"makefiles/argocd/#start-the-argo-cd-api-server","title":"Start the Argo CD API server","text":"<p>The target will also provide the credentials required to basic authenticate against the Argo CD API server UTR:</p> <pre><code>make argocd-dashboard\n</code></pre> <p>Sample output:</p> <pre><code>2023-04-10 21:51:12 logga [INFO]: Checking host:port 192.168.1.127:20443 Argo CD API server ...\n2023-04-10 21:51:13 logga [INFO]: Port 20443 ready\n### Argo CD API Server address forwarded to: https://192.168.1.127:20443\n### Argo CD API Server log output can be found at .makester/argocd-dashboard.out\n### Login to the Argo CD API Server as user \"admin\" with following password:\nbT9jKItiqd3tmSfY\n</code></pre>"},{"location":"makefiles/argocd/#stop-the-argo-cd-api-server","title":"Stop the Argo CD API server","text":"<p>Tears down the Kubernetes port-forward to the Argo CD API server.</p> <pre><code>make argocd-dashboard-stop\n</code></pre>"},{"location":"makefiles/argocd/#depoly-argo-cd-into-microk8s","title":"Depoly Argo CD into MicroK8s","text":"<p>Convenience all-in-one target to stand up an Argo CD instance:</p> <pre><code>make argocd-deploy\n</code></pre>"},{"location":"makefiles/argocd/#argo-cd-deployment-clean-up","title":"Argo CD deployment clean up","text":"<pre><code>make argocd-down\n</code></pre>"},{"location":"makefiles/argocd/#create-the-argo-cd-example-guestbook-application","title":"Create the Argo CD example guestbook application","text":"<p>You will be prompted for the Argo CD CLI login credentials that are the same as those provided by the <code>argocd-dashboard</code> target:</p> <pre><code>make argocd-example\n</code></pre>"},{"location":"makefiles/argocd/#delete-the-argo-cd-example-guestbook-application","title":"Delete the Argo CD example guestbook application","text":"<pre><code>make argocd-example-del\n</code></pre>"},{"location":"makefiles/argocd/#start-the-argo-cd-example-guestbook-application-ui","title":"Start the Argo CD example guestbook application UI","text":"<p>Creates a Kubernetes port-forward to the sample web app:</p> <pre><code>make argocd-example-ui\n</code></pre> <p>Sample output:</p> Argo CD sample web app output.<pre><code>### Argo CD Example App UI: http://192.168.1.127:20888 (Ctrl-C to stop)\nForwarding from 0.0.0.0:20888 -&gt; 80\n</code></pre> <p>The web app is a simple interface with limited capability: </p>"},{"location":"makefiles/argocd/#install-an-argo-cd-instance-into-the-argocd-namespace","title":"Install an Argo CD instance into the <code>argocd</code> namespace","text":"<pre><code>make argocd-install\n</code></pre>"},{"location":"makefiles/argocd/#create-the-argocd-namespace","title":"Create the <code>argocd</code> namespace","text":"<pre><code>make argocd-ns\n</code></pre>"},{"location":"makefiles/argocd/#delete-the-argocd-namespace","title":"Delete the <code>argocd</code> namespace","text":"<pre><code>make argocd-ns-del\n</code></pre>"},{"location":"makefiles/argocd/#argo-cd-deployment-and-api-server-setup","title":"Argo CD deployment and API server setup","text":"<p>All-in-one convenience target to install the required addons and deploy Argo CD into MicroK8s:</p> <pre><code>make argocd-up\n</code></pre>"},{"location":"makefiles/argocd/#variables","title":"Variables","text":""},{"location":"makefiles/argocd/#makester__argocd_dashboard_port","title":"<code>MAKESTER__ARGOCD_DASHBOARD_PORT</code>","text":"<p>The Argo CD API Server port (default <code>&lt;20443&gt;</code>).</p> <p>top</p>"},{"location":"makefiles/compose/","title":"Docker Compose","text":"<p>Traditional Makester compose has supported docker compose capability for basic multi-container orchestration. Makester strategy is to move more into the Kubernetes space. As such, support for Makester compose will continue to diminish over time.</p> <p>Note</p> <p>Support for PyPI <code>docker-compose</code> has been deprecated as there does not appear to be a roadmap within that project to move to docker compose V2.</p> <p>As of Moby 20.10.13, docker compose V2 is integrated into the Docker CLI. This means that we do not need to support the installation of the standalone docker-compose.</p> <p>The Makester Docker compose subsystem help lists the available commands:</p> <pre><code>make compose-help\n</code></pre>"},{"location":"makefiles/compose/#command-reference","title":"Command Reference","text":""},{"location":"makefiles/compose/#build-your-compose-stack","title":"Build your Compose Stack","text":"<pre><code>make compose-up\n</code></pre>"},{"location":"makefiles/compose/#example","title":"Example","text":"<p>A sample docker-compose.yml is provided for testing. The sample stack can be created with the following command:</p> <pre><code>SAMPLE_COMPOSE_PORT=19999 MAKESTER__COMPOSE_FILES=\"-f sample/docker-compose.yml\" make compose-up\n</code></pre> <p>Then navigate to http://localhost:19999 in your browser to see a simple NGiNX test page.</p> <p>Run <code>make compose-down</code> to bring the stack down.</p>"},{"location":"makefiles/compose/#destroy-your-compose-stack","title":"Destroy your Compose Stack","text":"<pre><code>make compose-down\n</code></pre>"},{"location":"makefiles/compose/#dump-your-compose-stacks-configuration","title":"Dump your Compose Stack's Configuration","text":"<pre><code>make compose-config\n</code></pre>"},{"location":"makefiles/compose/#variables","title":"Variables","text":""},{"location":"makefiles/compose/#makester__compose_files","title":"<code>MAKESTER__COMPOSE_FILES</code>","text":"<p>Makester compose expects a <code>docker-compose.yml</code> in the top level directory of the project repository. However, this can overridden by setting the <code>MAKESTER__COMPOSE_FILES</code> parameter:</p> <pre><code>MAKESTER__COMPOSE_FILES = -f docker-compose-supa.yml\n</code></pre>"},{"location":"makefiles/compose/#makester__compose_run_cmd","title":"<code>MAKESTER__COMPOSE_RUN_CMD</code>","text":"<p>If you need more control over <code>docker compose</code>, then override the <code>MAKESTER__COMPOSE_RUN_CMD</code> parameter in your <code>Makefile</code>. For example, to specify the verbose output option:</p> <pre><code>MAKESTER__COMPOSE_RUN_CMD ?= SERVICE_NAME=$(MAKESTER__PROJECT_NAME) HASH=$(HASH)\\\n $(MAKESTER__DOCKER_COMPOSE)\\\n --verbose\\\n $(MAKESTER__COMPOSE_FILES) $(COMPOSE_CMD)\n</code></pre>"},{"location":"makefiles/compose/#makester__compose_files_1","title":"<code>MAKESTER__COMPOSE_FILES</code>","text":"<p>Override the <code>docker compose</code> <code>--file</code> switch (defaults to <code>-f docker-compose.yml</code>).</p>"},{"location":"makefiles/compose/#makester__compose_run_cmd_1","title":"<code>MAKESTER__COMPOSE_RUN_CMD</code>","text":"<p>Override the <code>docker compose</code> run command.</p> <p>top</p>"},{"location":"makefiles/docker/","title":"Docker","text":"<p>Docker is core to Makester for both container image management and integrating supporting containerised services. For example, GitVersion. Wrap your wieldy, common Docker commands into a <code>make</code> target and start being productive.</p> <p>The Makester Docker subsystem help lists the available commands:</p> <pre><code>make docker-help\n</code></pre>"},{"location":"makefiles/docker/#example","title":"Example","text":"<p>A sample Dockerfile is provided by Makester to demonstrate basic capability.</p> <p>Note</p> <p>If you are running the following commands from Makester which has been setup within your project repository, then replace <code>resources/sample/Makefile</code> with <code>makester/resources/sample/Makefile</code>.</p> <p>To get help at any time:</p> <pre><code>make -f resources/sample/Makefile help\n</code></pre> <p>Build a Docker image based off the \"Hello World\" image:</p> <pre><code>make -f resources/sample/Makefile image-build\n</code></pre> Hello World image container runtime output.<pre><code>/usr/bin/docker build -t supa-cool-repo/my-project:99296c8 sample\nSending build context to Docker daemon  3.072kB\nStep 1/1 : FROM hello-world\n ---&gt; d1165f221234\nSuccessfully built d1165f221234\nSuccessfully tagged supa-cool-repo/my-project:99296c8\n</code></pre> <p>The resultant image build can be viewed:</p> <pre><code>make -f resources/sample/Makefile image-search\n</code></pre> Image in Docker.<pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE\nsupa-cool-repo/my-project   52c13b1   281099761321   10 months ago   9.14kB\n</code></pre> <p>To start a container from the <code>supa-cool-repo/my-project</code> image:</p> <pre><code>make -f resources/sample/Makefile container-run\n</code></pre> <p>Makester also supports image builds with BuildKit.</p> <pre><code>make -f resources/sample/Makefile image-buildx\n</code></pre> Hello World image build with BuildKit.<pre><code>[+] Building 0.7s (6/6) FINISHED\n =&gt; [internal] load build definition from Dockerfile                                       0.0s\n =&gt; =&gt; transferring dockerfile: 54B                                                        0.0s\n =&gt; [internal] load .dockerignore                                                          0.0s\n =&gt; =&gt; transferring context: 2B                                                            0.0s\n =&gt; [internal] load metadata for docker.io/library/hello-world:latest                      0.6s\n =&gt; CACHED [1/1] FROM docker.io/library/hello-world@sha256:aa0cc8055b82dc2509bed2e19b275c  0.0s\n =&gt; =&gt; resolve docker.io/library/hello-world@sha256:aa0cc8055b82dc2509bed2e19b275c8f46350  0.0s\n =&gt; exporting to oci image format                                                          0.1s\n =&gt; =&gt; exporting layers                                                                    0.0s\n =&gt; =&gt; exporting manifest sha256:09fa5bdba956b1732511e681f392cabd75554ffbc85e9ea2c7ee4925  0.0s\n =&gt; =&gt; exporting config sha256:52cac4254827711f6b1c1c75c516538b7b95656723f8aa6a4f74a9a59b  0.0s\n =&gt; =&gt; sending tarball                                                                     0.1s\n =&gt; importing to docker                                                                    0.0s\n</code></pre> <p>Makester performs a couple of customisations for you behind the scenes to steamline the image build process with BuildKit. These include:</p> <ul> <li>Identifies your platform and uses that value to set the <code>--platform</code> to <code>docker buildx build</code>.</li> <li>Adds the <code>--load</code> switch to <code>docker buildx build</code> so that the new image is exported into docker.</li> </ul> <p>Warning</p> <p>Without the <code>--load</code> switch, the <code>docker buildx build</code> process will display the following warning:</p> <pre><code>WARNING: No output specified with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load\n</code></pre> <p>To see the new plan for <code>docker buildx build</code>:</p> <pre><code>make -n -f resources/sample/Makefile image-buildx\n</code></pre> BuildKit's docker buildx build plan.<pre><code>docker buildx build --platform linux/arm64 --load -t supa-cool-repo/my-project:&lt;DOCKER_IMAGE_TAG&gt; sample\n</code></pre>"},{"location":"makefiles/docker/#support-for-multi-architecture-builds","title":"Support for multi-architecture builds","text":"<p>Makester v0.2.2</p> <p>Makester can now Leverage multi-CPU architecture support. However, there are some manual steps that need to be performed.</p>"},{"location":"makefiles/docker/#define-your-target-docker-platforms","title":"Define your target Docker platforms","text":"<p>To build an image that supports multiple architectures, you can define these by setting the <code>MAKESTER__DOCKER_PLATFORM</code> Makester variable. For example:</p> <pre><code>MAKESTER__DOCKER_PLATFORM=linux/arm64,linux/amd64 make -f resources/sample/Makefile image-buildx\n</code></pre> <p>However, in the default docker image build system you may see this error:</p> <pre><code>ERROR: docker exporter does not currently support exporting manifest lists\n</code></pre> <p>To mitigate this error, we will need to create new <code>buildx</code> builder. In this example, we will call the new builder <code>multiarch</code>. Change this name to suit your requirements::</p> <pre><code>docker buildx create --driver-opt network=host --name multiarch --use\n</code></pre> <p>Check to ensure that the new <code>multiarch</code> builder has been selected for use (note <code>multiarch *</code>):</p> List available BuildKit builders.<pre><code>docker buildx ls\n</code></pre> New BuildKit builder is selected.<pre><code>NAME/NODE        DRIVER/ENDPOINT             STATUS   BUILDKIT PLATFORMS\nmultiarch *      docker-container\n  multiarch0     unix:///var/run/docker.sock running  v0.11.1  linux/arm64, linux/amd64, linux/amd64/v2, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6\n</code></pre> <p>Recall that Makester's <code>docker buildx build</code> attempts to load the new image into docker's registry. However, this is not possible with BuildKit as it runs as a completely different process. Instead, we can load into a local registry server. Create the server as follows:</p> <pre><code>make image-registry-start\n</code></pre> <p>The image tag will also be updated to reflect the local registry server:</p> <pre><code>MAKESTER__DOCKER_PLATFORM=linux/arm64,linux/amd64 make -n -f resources/sample/Makefile image-buildx\n</code></pre> BuildKit build plan with the local registry server running.<pre><code>docker buildx build --platform linux/arm64,linux/amd64 --push -t localhost:15000/supa-cool-repo/my-project:52c13b1 sample\n</code></pre> <p>Warning</p> <p>Makester will make subtle changes to your Docker build command based on whether the local registry server is running or not. If you experience unexpected behaviour, check the status of your server.</p> <p>Now we can build the multi-platform container image:</p> <pre><code>MAKESTER__DOCKER_PLATFORM=linux/arm64,linux/amd64 make -f resources/sample/Makefile image-buildx\n</code></pre> <p>Note</p> <p>If you receive a <code>:15000: connect: connection refused</code> error, you may need to add the following to your Docker's <code>daemon.json</code> configuration file:</p> <pre><code>\"insecure-registries\" : [\n\"localhost:15000\",\n\"127.0.0.1:15000\",\n\"registry.me:15000\"\n],\n</code></pre> <p>To see the images in your local registry server, first list the catalog:</p> <pre><code>curl -X GET http://localhost:15000/v2/_catalog\n</code></pre> Local registry server catalog<pre><code>{\"repositories\":[\"supa-cool-repo/my-project\"]}\n</code></pre> <p>Next, get the list of available tags:</p> <pre><code>curl -X GET http://localhost:15000/v2/supa-cool-repo/my-project/tags/list\n</code></pre> Available tags<pre><code>{\"name\":\"supa-cool-repo/my-project\",\"tags\":[\"52c13b1\"]}\n</code></pre> <p>To access the new image from the local registry server:</p> <pre><code>docker pull localhost:15000/supa-cool-repo/my-project:52c13b1\n</code></pre> <p>The local registry server can now be terminated:</p> <pre><code>make image-registry-stop\n</code></pre> <p>Create a tag to align with the project's naming convention:</p> <pre><code>docker tag localhost:15000/supa-cool-repo/my-project:52c13b1 supa-cool-repo/my-project:52c13b1\n</code></pre> <p>Now it is possible to search for the new, multi-platform image as per normal:</p> <pre><code>make -f resources/sample/Makefile image-search\n</code></pre> Image search for new, multi-platform image in docker output.<pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE\nsupa-cool-repo/my-project   52c13b1   52cac4254827   10 months ago   9.14kB\n</code></pre> <p>Not convinced that the new images have been built with multi-platform support?:</p> Inspect image architectures.<pre><code>docker buildx imagetools inspect localhost:15000/supa-cool-repo/my-project:52c13b\n</code></pre> Image inspect output.<pre><code>Name:      localhost:15000/supa-cool-repo/my-project:52c13b1\nMediaType: application/vnd.oci.image.index.v1+json\nDigest:    sha256:6a8497a3199b5a220c175ae8c3d0b11149f04b5191e94fcce49b16bdfd630e98\n\nManifests:\n  Name:        localhost:15000/supa-cool-repo/my-project:52c13b1@sha256:73752638c848a53e033f1a7db6a1f2459e41cd291edbd4f6356593f915b2da63\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    linux/arm64\n\n  Name:        localhost:15000/supa-cool-repo/my-project:52c13b1@sha256:86954c5e397fdde46080e1bf13568bce1def33267125d6cbb9220eb0fd0a55f1\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    linux/amd64\n</code></pre>"},{"location":"makefiles/docker/#image-clean-up","title":"Image clean up","text":"<p>To delete the <code>supa-cool-repo/my-project</code> image:</p> <pre><code>make -f resources/sample/Makefile image-rm\n</code></pre>"},{"location":"makefiles/docker/#command-reference","title":"Command reference","text":""},{"location":"makefiles/docker/#deploy-a-local-registry-server","title":"Deploy a local registry server","text":"<p>Makester v0.1.4</p> <p>As per notes on how to Deploy a registry server.</p> <pre><code>make image-registry-start\n</code></pre> <p>The registry can be accessed with <code>curl</code>:</p> <pre><code>curl -X GET http://localhost:15000/v2/supa-cool-repo/my-project/tags/list\n</code></pre> <p>To stop the local image registry server:</p> <pre><code>make image-registry-stop\n</code></pre>"},{"location":"makefiles/docker/#build-your-docker-image","title":"Build your Docker image","text":"<pre><code>make image-build\n</code></pre> <p>Alternatively, leverage the features provided by BuildKit:</p> <pre><code>make image-buildx\n</code></pre>"},{"location":"makefiles/docker/#create-a-buildx-builder","title":"Create a <code>buildx</code> builder","text":"<p>As per docker buildx create, create a <code>buildx</code> builder instance to leverage capabilities provided by BuildKit. Such as multi-arch image builds:</p> <pre><code>make image-buildx-builder\n</code></pre> <p>Override <code>MAKESTER__BUILDKIT_BUILDER_NAME</code> to set the name of the buildx builder instance:</p> <pre><code>MAKESTER__BUILDKIT_BUILDER_NAME=my-builder make image-buildx-builder\n</code></pre>"},{"location":"makefiles/docker/#run-your-docker-images-as-a-container","title":"Run your Docker images as a container","text":"<pre><code>make container-run\n</code></pre> <p>The <code>container-run</code> target can be controlled in your <code>Makefile</code> by overriding the <code>MAKESTER__RUN_COMMAND</code> parameter. For example:</p> <pre><code>MAKESTER__RUN_COMMAND := $(MAKESTER__DOCKER) run --rm -d --name $(MAKESTER__CONTAINER_NAME) $(MAKESTER__SERVICE_NAME):$(HASH)\n</code></pre>"},{"location":"makefiles/docker/#tag-docker-image-with-the-latest-tag","title":"Tag Docker image with the <code>latest</code> tag","text":"<pre><code>make image-tag\n</code></pre>"},{"location":"makefiles/docker/#tag-docker-image-with-a-custom-versioning-policy","title":"Tag Docker image with a custom versioning policy","text":"<pre><code>make image-tag-version\n</code></pre> <p>Version defaults to <code>0.0.0-1</code> but this can be overridden by setting <code>MAKESTER__VERSION</code> and <code>MAKESTER__RELEASE_NUMBER</code> in your <code>Makefile</code>. Alternatively, to align with your preferred tagging convention, override the <code>MAKESTER__IMAGE_TAG</code> parameter. For example:</p> <pre><code>make tag MAKESTER__IMAGE_TAG=supa-tag-01\n</code></pre>"},{"location":"makefiles/docker/#remove-your-docker-image","title":"Remove your Docker image","text":"<pre><code>make image-rm\n</code></pre>"},{"location":"makefiles/docker/#remove-dangling-docker-images","title":"Remove dangling Docker images","text":"<pre><code>make image-rm-dangling\n</code></pre>"},{"location":"makefiles/docker/#variables","title":"Variables","text":""},{"location":"makefiles/docker/#makester__image_target_tag","title":"<code>MAKESTER__IMAGE_TARGET_TAG</code>","text":"<p>Unique identifier used to distinguish container image builds. Defaults to HASH.</p>"},{"location":"makefiles/docker/#makester__image_tag_alias","title":"<code>MAKESTER__IMAGE_TAG_ALIAS</code>","text":"<p>Convenience variable that is made up of the MAKESTER__SERVICE_NAME and <code>MAKESTER__IMAGE_TARGET_TAG</code>. For example:</p> MAKESTER__SERVICE_NAME sample value<pre><code>MAKESTER__SERVICE_NAME=supa-cool-repo/my-project\n</code></pre> MAKESTER__SERVICE_NAME sample value<pre><code>MAKESTER__IMAGE_TARGET_TAG=52c13b1\n</code></pre> <pre><code>make -f resources/sample/Makefile print-MAKESTER__IMAGE_TAG_ALIAS\n</code></pre> MAKESTER__IMAGE_TAG_ALIAS based on MAKESTER__SERVICE_NAME:MAKESTER__IMAGE_TAG_ALIAS<pre><code>MAKESTER__IMAGE_TAG_ALIAS=supa-cool-repo/my-project:52c13b1\n</code></pre>"},{"location":"makefiles/docker/#makester__container_name","title":"<code>MAKESTER__CONTAINER_NAME</code>","text":"<p>Control the name of your image container (defaults to <code>my-container</code>).</p>"},{"location":"makefiles/docker/#makester__image_tag","title":"<code>MAKESTER__IMAGE_TAG</code>","text":"<p>Defaults to <code>latest</code>.</p>"},{"location":"makefiles/docker/#makester__run_command","title":"<code>MAKESTER__RUN_COMMAND</code>","text":"<p>Override the image container run command that is initiated by <code>make container-run</code>.</p>"},{"location":"makefiles/docker/#makester__build_command","title":"<code>MAKESTER__BUILD_COMMAND</code>","text":"<p>Override the command line options to <code>docker build</code> or <code>docker buildx build</code> to have more fine-grained control over the container image build process. For example, the following snippet overrides the image tag:</p> <pre><code>MAKESTER__BUILD_COMMAND := -t $(MAKESTER__SERVICE_NAME):$(HASH) .\n</code></pre>"},{"location":"makefiles/docker/#makester__docker_platform","title":"<code>MAKESTER__DOCKER_PLATFORM</code>","text":"<p>Override the <code>--platform</code> switch to <code>docker buildx</code>. Multi-architecture builds are supported.</p>"},{"location":"makefiles/docker/#makester__local_registry","title":"<code>MAKESTER__LOCAL_REGISTRY</code>","text":"<p>The host and IP of the local Docker image registry server which is used to configure REGISTRY_HTTP_ADDR. The default is <code>0.0.0.0:5000</code>. Although it is possible to override this variable, it only controls the settings that the registry listens on within the container.</p>"},{"location":"makefiles/docker/#makester__local_registry_port","title":"<code>MAKESTER__LOCAL_REGISTRY_PORT</code>","text":"<p><code>MAKESTER__LOCAL_REGISTRY_PORT</code> controls the local registry server host port that you can connect to. The default is <code>15000</code>. You can override this setting if you detect a clash on port <code>15000</code> or you want to run multiple local registry servers.</p> Overriding MAKESTER__LOCAL_REGISTRY_PORT.<pre><code>MAKESTER__LOCAL_REGISTRY_PORT=15001\n</code></pre>"},{"location":"makefiles/docker/#makester__buildkit_builder_name","title":"<code>MAKESTER__BUILDKIT_BUILDER_NAME</code>","text":"<p>The name to give to the docker buildx create builder. Defaults to <code>multiarch</code>.</p> <p>top</p>"},{"location":"makefiles/docs/","title":"Documentation","text":"<p>Makester's documentation subsystem helps you prepare and maintain your site's project documentation.</p> <p>Sadly, technical documentation has become an oversight in many projects. Makester's documentation subsystem attempts to reduce the burden of project documentation setup and maintenance that is not bound to a single programming language. It's just Markdown.</p> <p>Makester documentation leverages the Materials for MkDocs theme.</p> <p>The Makester documentation subsystem help lists the available commands:</p> <pre><code>make help-docs\n</code></pre>"},{"location":"makefiles/docs/#command-reference","title":"Command reference","text":""},{"location":"makefiles/docs/#site-documentation-scaffolding","title":"Site documentation scaffolding","text":"<p>Create the site documentation directory structure based on Material for MkDocs: Creating your site.</p> <pre><code>make docs-project-create\n</code></pre> <p>If the default settings are accepted, this will create a <code>docs</code> directory under the top level of you project code repository. The minimal content is:</p> <pre><code>docs\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <p>Additions will need to be performed manually by adding new content under the <code>docs</code> directory. Some things you probably want to do in the first instance include:</p> <ul> <li>Change the name of your site's documentation</li> <li>Edit the <code>site_name</code> setting in the <code>docs/mkdocs.yml</code>.</li> <li>Change the theme:</li> <li>Unless you are happy the the standard MkDocs default theme, enable the MkDocs <code>material</code> theme. Append the following to <code>docs/mkdocs.yml</code>:</li> </ul> <pre><code>theme:\n  name: material\n</code></pre>"},{"location":"makefiles/docs/#preview-while-you-write","title":"Preview while you write","text":"<p>Enable the MkDocs preview server.</p> <pre><code>make docs-preview\n</code></pre>"},{"location":"makefiles/docs/#site-documentation-builder","title":"Site documentation builder","text":"<p>Build your site's static documentation.</p> <pre><code>make docs-build\n</code></pre>"},{"location":"makefiles/docs/#variables","title":"Variables","text":""},{"location":"makefiles/docs/#makester__docs_dir","title":"<code>MAKESTER__DOCS_DIR</code>","text":"<p>Location of MkDocs documentation structure (default <code>&lt;MAKESTER__PROJECT_DIR&gt;/docs</code>).</p>"},{"location":"makefiles/docs/#makester__docs_ip","title":"<code>MAKESTER__DOCS_IP</code>","text":"<p>The documentation preview server's IP address (default <code>&lt;MAKESTER__LOCAL_IP&gt;</code>).</p>"},{"location":"makefiles/docs/#makester__docs_port","title":"<code>MAKESTER__DOCS_PORT</code>","text":"<p>The documentation preview server's port (default <code>8000</code>).</p>"},{"location":"makefiles/docs/#makester__docs_build_path","title":"<code>MAKESTER__DOCS_BUILD_PATH</code>","text":"<p>The directory to output the result of the documentation build (default <code>&lt;MAKESTER__DOCS_DIR&gt;/out</code>).</p> <p>top</p>"},{"location":"makefiles/makester/","title":"Makester","text":"<p>The Makester Makefile, <code>makester/makefiles/makester.mk</code> is the core interface to Makester capabilities. To start using Makester, add the following <code>include</code> into your <code>Makefile</code>:</p> <pre><code>include makester/makefiles/makester.mk\n</code></pre> <p>To validate Makester, run the <code>makester-help</code> target and ensure there are no errors:</p> <pre><code>make makester-help\n</code></pre>"},{"location":"makefiles/makester/#command-reference","title":"Command reference","text":""},{"location":"makefiles/makester/#display-the-makester-variables","title":"Display the Makester variables","text":"<p>Makester context is driven by environment variables. Most of these variables can be overridden to suit your particular use cases.</p> Display the state of the Makester variables.<pre><code>make vars\n</code></pre>"},{"location":"makefiles/makester/#add-a-sample-gitignore-to-your-project","title":"Add a sample <code>.gitignore</code> to your project","text":"<p>Adds a <code>.gitignore</code> under <code>&lt;MAKESTER__PROJECT_DIR&gt;</code>. Uses the Makester sample <code>.gitignore</code> as a starting point.</p> <pre><code>make makester-gitignore\n</code></pre>"},{"location":"makefiles/makester/#add-an-mit-licence-to-your-project","title":"Add an MIT licence to your project","text":"<p>Add an MIT license under <code>&lt;MAKESTER__PROJECT_DIR&gt;</code>. You will need to manually adjust the <code>&lt;year&gt;</code> and <code>&lt;copyright holders&gt;</code>:</p> <pre><code>make makester-mit-license\n</code></pre>"},{"location":"makefiles/makester/#update-your-existing-git-submodules","title":"Update your existing Git submodules","text":"<pre><code>make submodule-update\n</code></pre>"},{"location":"makefiles/makester/#makester-variables","title":"Makester variables","text":"<p>The standard GNU Makefile variable convention is adhered to within the project. Makester introduces special purpose variables are denoted as <code>MAKESTER__&lt;VARIABLE_NAME&gt;</code>. Makester will attempt to provide sane defaults to get you started. However, it is recommended that you override these values in your own project's Makefile to provide more informative context.</p> <p>A description of the Makester special purpose variables follows:</p>"},{"location":"makefiles/makester/#makester__project_name","title":"<code>MAKESTER__PROJECT_NAME</code>","text":"<p>The name of the project. Defaults to the current working directory's basename.</p>"},{"location":"makefiles/makester/#makester__service_name","title":"<code>MAKESTER__SERVICE_NAME</code>","text":"<p>A service identifier that defaults to <code>MAKESTER__PROJECT_NAME</code>. This can be used to target your container repository and identify your image.</p> <p><code>MAKESTER__SERVICE_NAME</code> can be overridden at the top of your <code>Makefile</code> as follows:</p> <pre><code># Include overrides (must occur before include statements).\nMAKESTER__SERVICE_NAME := supa-cool-service-name\n</code></pre> <p>Note</p> <p>If <code>MAKESTER__REPO_NAME</code> is defined in your <code>Makefile</code> then <code>MAKESTER__SERVICE_NAME</code> becomes <code>MAKESTER__REPO_NAME/MAKESTER__PROJECT_NAME</code>. For example <code>supa-cool-repo/my-project</code> is achieved with the following: <code>sh     MAKESTER__REPO_NAME := supa-cool-repo     MAKESTER__PROJECT_NAME := my-project</code></p>"},{"location":"makefiles/makester/#makester__static_service_name","title":"<code>MAKESTER__STATIC_SERVICE_NAME</code>","text":"<p>Same as MAKESTER__SERVICE_NAME but guaranteed not to change. With the introduction of the local registry server, <code>MAKESTER__SERVICE_NAME</code> could be altered to incorporate the name of the local registry server.</p> <p>Note</p> <p><code>MAKESTER__STATIC_SERVICE_NAME</code> is the static equivalent of the initialised <code>MAKESTER__SERVICE_NAME</code> and cannot be overridden.</p>"},{"location":"makefiles/makester/#hash","title":"<code>HASH</code>","text":"<p>As per <code>git rev-parse --help</code>. The <code>HASH</code> value of your <code>git</code> branch allows you to uniquely identify each build revision within your project. Once you merge your code changes back into the <code>main</code> branch, you can <code>make image-tag-latest</code> to tag the image with <code>latest</code>.</p>"},{"location":"makefiles/makester/#makester__version","title":"<code>MAKESTER__VERSION</code>","text":"<p>Manually managed versioning control (defaults to <code>0.0.0</code>).</p>"},{"location":"makefiles/makester/#makester__release_number","title":"<code>MAKESTER__RELEASE_NUMBER</code>","text":"<p>Manually managed release number control when <code>MAKESTER__VERSION</code> is unchanged (defaults to <code>1</code>).</p>"},{"location":"makefiles/makester/#makester__release_version","title":"<code>MAKESTER__RELEASE_VERSION</code>","text":"<p>Advanced versioning control that provides a hook into an autonomous versioning facility (for example, GitVersion).</p>"},{"location":"makefiles/makester/#makester__local_ip","title":"<code>MAKESTER__LOCAL_IP</code>","text":"<p>Platform independent way to get the local host's IP address.</p>"},{"location":"makefiles/makester/#makester__work_dir","title":"<code>MAKESTER__WORK_DIR</code>","text":"<p>Working area that Makester uses to store information (defaults to <code>$PWD/.makester</code>).</p> <p>Note</p> <p>Be sure to add the location of <code>MAKESTER__WORK_DIR</code> into your project's <code>.gitignore</code>.</p>"},{"location":"makefiles/makester/#makester__k8s_manifests","title":"<code>MAKESTER__K8S_MANIFESTS</code>","text":"<p>Location of your project's Kubernetes manifests (defaults to <code>&lt;MAKESTER__WORK_DIR&gt;/k8s/manifests</code>).</p>"},{"location":"makefiles/makester/#makester__project_dir","title":"<code>MAKESTER__PROJECT_DIR</code>","text":"<p>The home directory of the project (defaults to <code>$PWD</code> or the top level of where your project's <code>.git</code> directory can be found).</p>"},{"location":"makefiles/makester/#makester__package_name","title":"<code>MAKESTER__PACKAGE_NAME</code>","text":"<p>The name to use for the package distribution. Defaults to the <code>MAKESTER__PROJECT_NAME</code> but available if a distinction is required. <code>MAKESTER__PACKAGE_NAME</code> is also used to build the <code>MAKESTER__PYTHON_PROJECT_ROOT</code>  directory.</p>"},{"location":"makefiles/makester/#makester__includes","title":"<code>MAKESTER__INCLUDES</code>","text":"<p>Makester v0.2.3</p> <p>Control the Makester includes (defaults to all Makester <code>Makefile</code>s <code>py docker compose k8s kompose versioning docs</code>).</p> <p>top</p>"},{"location":"makefiles/py/","title":"Python","text":"<p>Handy Python tooling.</p> <p>Makester v0.1.4</p>"},{"location":"makefiles/py/#getting-started","title":"Getting started","text":"<p>Ensure a Python 3 interpreter is available in your path (we recommend installing pyenv).</p> <p>The Makester Python subsystem aims to be a light-weight, pure-Python implementation of your project's Python project environment management with basic tooling. Unlike Conda and Poetry, or the like, no additional software installs or new learnings are required. But again, that is not the real problem Makester is trying to solve and does not care if you insist on using a third-party tool for your Python packaging and dependency management. Simply abstract those commands behind a <code>make</code> target. This allows you to swap out and/or implement a hybrid Python packaging and dependency management system, if that is what you really want to do.</p>"},{"location":"makefiles/py/#command-reference","title":"Command reference","text":""},{"location":"makefiles/py/#create-a-simple-python-project-directory-layout","title":"Create a simple Python project directory layout","text":"<p>Makester v0.1.4</p> <p>Quick start Python project based on Packaging Python Projects.</p> <pre><code>make py-proj-create\n</code></pre> <p>Note</p> <p>Defaults to src-layout.</p> <p>For example, given <code>MAKESTER__PROJECT_DIR=/var/tmp/fruit</code>:</p> <pre><code>MAKESTER__PACKAGE_NAME=banana make py-proj-create\n</code></pre> <p>Makester will produce the following directory layout:</p> <pre><code>/var/tmp/fruit\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 banana\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 banana\n</code></pre>"},{"location":"makefiles/py/#create-a-pylint-configuration","title":"Create a Pylint configuration","text":"<p>As per Pylint configuration</p> <pre><code>make py-pylintrc\n</code></pre>"},{"location":"makefiles/py/#create-a-python-distribution-package","title":"Create a Python distribution package","text":"<p>Makester v0.1.4</p> <p>Create a versioned archive file that contains your Python packages:</p> <pre><code>make py-distribution\n</code></pre> <p>See Packaging Python Projects for more information.</p>"},{"location":"makefiles/py/#display-your-local-environments-python-setup","title":"Display your local environment's Python setup","text":"<p>Makester v0.1.4</p> <pre><code>make py-vars\n</code></pre> <pre><code>### System python3: &lt;$HOME&gt;/.pyenv/shims/python3\n### System python3 version: Python 3.10.8\n### ---\n### Virtual env tooling: &lt;$HOME&gt;/.pyenv/shims/python3 -m venv\n### Virtual env Python: &lt;$HOME&gt;/dev/makester/venv/bin/python\n### Virtual env pip: &lt;$HOME&gt;/dev/makester/venv/bin/pip\n</code></pre>"},{"location":"makefiles/py/#build-virtual-environment-venv","title":"Build virtual environment <code>venv</code>","text":"<p>Makester v0.1.4</p> <pre><code>make py-venv-create\n</code></pre> <p>Note</p> <p>Makester virtual environment creation will also automatically update <code>pip</code> and <code>setuptools</code> versions to the latest whilst also installing the <code>wheel</code> package.</p>"},{"location":"makefiles/py/#delete-virtual-environment-venv","title":"Delete virtual environment <code>venv</code>","text":"<p>Makester v0.1.4</p> <pre><code>make py-venv-clear\n</code></pre>"},{"location":"makefiles/py/#install-python-package-dependencies-from-requirementstxt","title":"Install Python package dependencies from <code>requirements.txt</code>","text":"<p><code>pip</code> editable install with package dependencies taken from <code>requirements.txt</code>:</p> <pre><code>make pip-requirements\n</code></pre>"},{"location":"makefiles/py/#install-python-package-dependencies-from-setuppy","title":"Install Python package dependencies from <code>setup.py</code>","text":"<p><code>pip</code> editable install with package dependencies taken from <code>setup.py</code>:</p> <pre><code>make pip-editable\n</code></pre>"},{"location":"makefiles/py/#install-python-package-dependencies-from-pyprojecttoml","title":"Install Python package dependencies from <code>pyproject.toml</code>","text":"<p>Makester v0.1.4</p> <p>As per PEP 660, editable installs are now supported from <code>pyproject.toml</code>:</p> <pre><code>make py-install\n</code></pre> <p>Note</p> <p><code>pip</code> editable installs via <code>pyproject.toml</code> are supported together with setuptools v64.0.0 as the backend and pip v21.3 as the frontend. Both <code>setuptools</code> and <code>pip</code> are automatically updated as part of <code>make py-venv-create</code>.</p>"},{"location":"makefiles/py/#build-python-package-from-setuppy","title":"Build Python package from <code>setup.py</code>","text":"<p>Write wheel package to <code>--wheel-dir</code> (defaults to <code>~/wheelhouse</code>):</p> <pre><code>make package\n</code></pre>"},{"location":"makefiles/py/#invoke-the-python-virtual-environment-repl","title":"Invoke the Python virtual environment REPL","text":"<pre><code>make py\n</code></pre>"},{"location":"makefiles/py/#show-python-package-dependencies","title":"Show Python package dependencies","text":"<p>Leverage the awesome pipdeptree tool.</p> <pre><code>make py-deps\n</code></pre>"},{"location":"makefiles/py/#format-your-python-modules","title":"Format your Python modules","text":"<p>Makester v0.1.4</p> <p>Use black for code formatting.</p> <pre><code>make py-fmt-all\n</code></pre> Sample formatter output.<pre><code>### Formatting Python files under \"&lt;$MAKESTER__PROJECT_DIR&gt;/src\"\nAll done! \u2728 \ud83c\udf70 \u2728\n4 files left unchanged.\n</code></pre> <p>To target Python modules under <code>MAKESTER__PYTHONPATH</code>:</p> <pre><code>make py-fmt-src\n</code></pre> <p>Similarly for test modules, to target Python modules under <code>MAKESTER__TESTS_PYTHONPATH</code>:</p> <pre><code>make py-fmt-tests\n</code></pre> <p>To target a subset of your project, or even individual files with the <code>py-fmt</code> target:</p> <pre><code>make py-fmt\n</code></pre> <p>Without providing a <code>FMT_PATH</code>, the command will error:</p> Formatting error without setting a path.<pre><code>### \"FMT_PATH\" undefined\n###\nmakefiles/py.mk:79: *** ###.  Stop.\n</code></pre> <p>The following example demonstrates how to set <code>FMT_PATH</code> for a single Python module:</p> Formatting a Python module.<pre><code>FMT_PATH=src/makester/templater.py make py-fmt\n</code></pre> Sample formatter output when setting FMT_PATH.<pre><code>### Formatting Python files under \"src/makester/templater.py\"\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file left unchanged.\n</code></pre> <p>Directory paths to Python modules are also supported:</p> Formatting Python modules under a given path.<pre><code>FMT_PATH=src/makester make py-fmt\n</code></pre> Sample formatter output when setting FMT_PATH with a path to Python modules.<pre><code>### Formatting Python files under \"src/makester\"\nAll done! \u2728 \ud83c\udf70 \u2728\n4 files left unchanged.\n</code></pre>"},{"location":"makefiles/py/#lint-your-python-modules","title":"Lint your Python modules","text":"<p>Makester v0.1.4</p> <p>Use pylint for code linting.</p> <pre><code>make py-lint-all\n</code></pre> Sample linter output.<pre><code>### Linting Python files under \"&lt;$MAKESTER__PROJECT_DIR&gt;/src\"\n\n--------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n</code></pre> <p>To target Python modules under <code>MAKESTER__PYTHONPATH</code>:</p> <pre><code>make py-lint-src\n</code></pre> <p>Similarly for test modules, to target Python modules under MAKESTER__TESTS_PYTHONPATH:</p> <pre><code>make py-lint-tests\n</code></pre> <p>To target a subset of your project, or even individual files with the <code>py-lint</code> target:</p> <pre><code>make py-lint\n</code></pre> <p>Without providing a <code>LINT_PATH</code>, the command will error:</p> Linting error without setting a path.<pre><code>### \"LINT_PATH\" undefined\n###\nmakefiles/py.mk:88: *** ###.  Stop.\n</code></pre> <p>The following example demonstrates how to set <code>LINT_PATH</code> for a single Python module:</p> Linting a Python module.<pre><code>LINT_PATH=src/makester/templater.py make py-lint\n</code></pre> Sample linter output when setting LINT_PATH.<pre><code>### Linting Python files under \"src/makester/templater.py\"\n\n--------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n</code></pre> <p>Directory paths to Python modules are also supported:</p> Linting Python modules under a given path.<pre><code>LINT_PATH=src/makester make py-lint\n</code></pre> Sample linter output when setting LINT_PATH with a path to Python modules.<pre><code>### Linting Python files under \"src/makester\"\n\n--------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n</code></pre>"},{"location":"makefiles/py/#type-annotating-your-python-modules","title":"Type annotating your Python modules","text":"<p>Makester v0.1.4</p> <p>Use mypy for code type annotation.</p> <p>Note</p> <p>Makester defaults to a more strict interpretation of type annotation checks with the <code>--disallow-untyped-defs</code> switch. This can be overridden with <code>MAKESTER__MYPY_OPTIONS</code>.</p> <pre><code>make py-type-all\n</code></pre> Sample type annotation output.<pre><code>### Type annotating Python files under \"/Users/lomarkovski/dev/makester/src\"\nSuccess: no issues found in 4 source files\n</code></pre> <p>To target Python modules under <code>MAKESTER__PYTHONPATH</code>:</p> <pre><code>make py-type-src\n</code></pre> <p>Similarly for test modules, to target Python modules under <code>MAKESTER__TESTS_PYTHONPATH</code>:</p> <pre><code>make py-type-tests\n</code></pre> <p>To target a subset of your project, or even individual files with the <code>py-type</code> target:</p> <pre><code>make py-type\n</code></pre> <p>Without providing a <code>TYPE_PATH</code>, the command will error:</p> Formatting error without setting a path.<pre><code>### \"TYPE_PATH\" undefined\n###\nmakefiles/py.mk:117: *** ###.  Stop.\n</code></pre> <p>The following example demonstrates how to set <code>TYPE_PATH</code> for a single Python module:</p> Type annotating a Python module.<pre><code>TYPE_PATH=src/makester/templater.py make py-type\n</code></pre> Sample type annotating output when setting LINT_PATH.<pre><code>### Type annotating Python files under \"src/makester/templater.py\"\nSuccess: no issues found in 1 source file\n</code></pre> <p>Directory paths to Python modules are also supported:</p> Type annotating Python modules under a given path.<pre><code>TYPE_PATH=src/makester make py-type\n</code></pre> Sample type annotation output when setting LINT_PATH with a path to Python modules.<pre><code>### Type annotating Python files under \"src/makester\"\nSuccess: no issues found in 4 source files\n</code></pre>"},{"location":"makefiles/py/#markdown-formatter","title":"Markdown formatter","text":"<p>Makester v0.3.0</p> <p>Use mdformat as a CommonMark compliant Markdown formatter.</p> <pre><code>make py-md-fmt\n</code></pre> <p>Without providing a <code>MD_FMT_PATH</code>, the command will error:</p> Markdown formatting error without setting a path.<pre><code>### \"MD_FMT_PATH\" undefined\n###\nmakefiles/py.mk:218: *** ###.  Stop.\n</code></pre> <p>The following example demonstrates how to set <code>MD_FMT_PATH</code> for a single Markdown file:</p> Formatting a single Markdown file.<pre><code>make py-md-fmt MD_FMT_PATH=docs/docs/index.md\n</code></pre> Sample formatter output when setting MD_FMT_PATH.<pre><code>### Formatting Markdown files under \"docs/docs/index.md\"\n</code></pre> <p>Directory paths to Markdown files are also supported:</p> Markdown formatting under a given path.<pre><code>make py-md-fmt MD_FMT_PATH=docs\n</code></pre>"},{"location":"makefiles/py/#all-in-one-code-checker","title":"All-in-one code checker","text":"<p>Special convenience target that runs all code check commands together.</p> Lint, format and annotate in one step<pre><code>make py-check\n</code></pre>"},{"location":"makefiles/py/#variables","title":"Variables","text":""},{"location":"makefiles/py/#makester__system_python3","title":"<code>MAKESTER__SYSTEM_PYTHON3</code>","text":"<p>Path to the current system-wide <code>python</code> executable. In Makester context, this should only be used to create a Python virtual environment for your project. Makester will attempt to identify the Python interpreter from your environment path. However, <code>MAKESTER__SYSTEM_PYTHON3</code> can also be used to override the system-wide Python.</p>"},{"location":"makefiles/py/#makester__python","title":"<code>MAKESTER__PYTHON</code>","text":"<p>Path to the Python virtual environment <code>python</code> executable. You can reference this anywhere in your <code>Makefile</code> as <code>$(MAKESTER__PYTHON)</code>.</p>"},{"location":"makefiles/py/#makester__pip","title":"<code>MAKESTER__PIP</code>","text":"<p>Path to the Python virtual environment <code>pip</code> executable. You can reference this anywhere in your <code>Makefile</code> as <code>$(MAKESTER__PIP)</code>.</p>"},{"location":"makefiles/py/#makester__wheelhouse","title":"<code>MAKESTER__WHEELHOUSE</code>","text":"<p>Control the location to where Python will build its wheels to. See wheel-dir.</p>"},{"location":"makefiles/py/#makester__python_project_root","title":"<code>MAKESTER__PYTHON_PROJECT_ROOT</code>","text":"<p>Path to the Python package contents. For example, <code>MAKESTER__PYTHON_PROJECT_ROOT</code> would be <code>&lt;MAKESTER__PROJECT_DIR&gt;/project/src/my_package</code> if your Python project structure follows this format:</p> <pre><code>project/\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 my_package/\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 example.py\n</code></pre>"},{"location":"makefiles/py/#makester__pythonpath","title":"<code>MAKESTER__PYTHONPATH</code>","text":"<p>Makester Python project directory structure follows the <code>src</code> layout. However, this can be overridden with <code>MAKESTER__PYTHONPATH</code> (default to <code>$MAKESTER__PROJECT_DIR/src</code>)</p> <p><code>MAKESTER__PYTHONPATH</code> also acts as the default value for <code>PYTHONPATH</code> in your environment.</p>"},{"location":"makefiles/py/#makester__tests_pythonpath","title":"<code>MAKESTER__TESTS_PYTHONPATH</code>","text":"<p>Python project <code>src</code> layout's <code>tests</code> directory location compliment (default to <code>$MAKESTER__PROJECT_DIR/tests</code>).</p>"},{"location":"makefiles/py/#makester__mypy_options","title":"<code>MAKESTER__MYPY_OPTIONS</code>","text":"<p>Control the switch settings to <code>mypy</code> when running type annotation across the code base (default <code>--disallow-untyped-defs</code>).</p> <p>top</p>"},{"location":"makefiles/terraform/","title":"Terraform","text":"<p>Makester v0.2.5</p> <p>Terraform is an infrastructure as code tool that lets you build, change, and version infrastructure safely and efficiently.</p> <p>Warning</p> <p>Caveat emptor: The intro was taken from the official Terraform page. Makester is by no way endorsing Terraform as a preferred IaC. There are probably better ways to handle infrastructure deployments. Consider this only as a basic Terraform primer. For example, to stand up a managed Kubernetes cluster where you can then leverage GitOps. The less DevOps in your project, the better ...</p>"},{"location":"makefiles/terraform/#getting-started","title":"Getting started","text":"<p>Ensure Terraform is available in your path (we recommend installing tfenv).</p> <p>If managing <code>Makefile</code> includes manually, you must append <code>terraform</code> to <code>MAKESTER__INCLUDES</code> to enable the Makester Terraform subsystem.</p>"},{"location":"makefiles/terraform/#command-reference","title":"Command reference","text":""},{"location":"makefiles/terraform/#create-a-simple-terraform-project-directory-layout","title":"Create a simple Terraform project directory layout","text":"<pre><code>make tf-project-create\n</code></pre> <p>Makester will produce the following directory layout:</p> <pre><code>terraform\n\u251c\u2500\u2500 data.tf\n\u251c\u2500\u2500 locals.tf\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 provider.tf\n\u251c\u2500\u2500 terraform.tfvars\n</code></pre> <p><code>provider.tf</code> is pre-populated with the standard <code>terraform</code> block, ready to start adding your providers. All other files within the <code>terraform</code> directory are simple stubs, only.</p> <p>With new Terraform configuration files in place, you will need to initialise the working directory.</p>"},{"location":"makefiles/terraform/#initialise-a-terraform-working-directory","title":"Initialise a Terraform working directory","text":"<p>Terraform command: init</p> <p>This is the first command that should be run after writing a new Terraform configuration and is safe to re-run multiple times.</p> <pre><code>make tf-init\n</code></pre>"},{"location":"makefiles/terraform/#validate-terraform-configuration-files","title":"Validate Terraform configuration files","text":"<p>Terraform command: init</p> <p>Checks if configuration is syntactically valid and internally consistent. Validation does not access remote state.</p> <pre><code>make tf-validate\n</code></pre>"},{"location":"makefiles/terraform/#display-current-terraform-version","title":"Display current Terraform version","text":"<p>Terraform command: init</p> <pre><code>make tf-version\n</code></pre>"},{"location":"makefiles/terraform/#preview-the-terraform-execution-plan","title":"Preview the Terraform execution plan","text":"<p>Terraform command: init</p> <p>Report on state changes before applying.</p> <pre><code>make tf-plan\n</code></pre>"},{"location":"makefiles/terraform/#execute-the-terraform-execution-plan","title":"Execute the Terraform execution plan","text":"<p>Terraform command: init</p> <p>Applies the Terraform configuration in the working directory.</p> <pre><code>make tf-apply\n</code></pre>"},{"location":"makefiles/terraform/#destroy-all-remote-objects-managed-by-terraform-configuration","title":"Destroy all remote objects managed by Terraform configuration","text":"<p>Terraform command: init</p> <pre><code>make tf-destroy\n</code></pre>"},{"location":"makefiles/terraform/#rewrite-terraform-configuration-with-consistent-formatting","title":"Rewrite Terraform configuration with consistent formatting","text":"<p>Terraform command: init</p> <p>Formatting is based on a subset of the Terraform language style conventions.</p> <pre><code>make tf-fmt\n</code></pre>"},{"location":"makefiles/terraform/#check-terraform-configuration-formatting","title":"Check Terraform configuration formatting","text":"<p>Terraform command: init</p> <p>Report on Terraform configuration files that are subject to formatting changes.</p> <pre><code>make tf-fmt-check\n</code></pre>"},{"location":"makefiles/terraform/#display-terraform-configuration-formatting-diffs","title":"Display Terraform configuration formatting diffs","text":"<p>Terraform command: init</p> <p>Display Terraform configuration file formatting differences.</p> <pre><code>make tf-fmt-diff\n</code></pre>"},{"location":"makefiles/terraform/#launch-interactive-console","title":"Launch interactive console","text":"<p>Terraform command: init</p> <p>Console allows you to evaluate Terraform expressions and interact with any values that are currently saved in the configuration state.</p> <pre><code>make tf-console\n</code></pre>"},{"location":"makefiles/terraform/#inspecting-infrastructure-state","title":"Inspecting infrastructure state","text":"<p>Terraform command: state list</p> <p>List all resources in the state file:</p> <pre><code>make tf-state-ls \n</code></pre> <p>It is possible to filter resources by providing an address to the <code>MAKESTER__TERRAFORM_RESOURCE</code> variable:</p> <pre><code>make tf-state-ls MAKESTER__TERRAFORM_RESOURCE=&lt;OBJECT_ADDRESS&gt;\n</code></pre>"},{"location":"makefiles/terraform/#workspaces-list-all-available-workspaces","title":"Workspaces: list all available workspaces","text":"<p>Terraform command: state list</p> <pre><code>make tf-ws-list MAKESTER__TERRAFORM_WS=&lt;WORKSPACE_NAME&gt;\n</code></pre>"},{"location":"makefiles/terraform/#workspaces-create-a-new-workspace","title":"Workspaces: create a new workspace","text":"<p>Terraform command: state list</p> <p>Create a new Terraform workspace as per the value defined by MAKESTER__TERRAFORM_WS.</p> <pre><code>make tf-ws-new MAKESTER__TERRAFORM_WS=&lt;WORKSPACE_NAME&gt;\n</code></pre>"},{"location":"makefiles/terraform/#workspaces-delete-a-workspace","title":"Workspaces: delete a workspace","text":"<p>Terraform command: state list</p> <p>Delete Terraform workspace defined by MAKESTER__TERRAFORM_WS.</p> <pre><code>make tf-ws-delete MAKESTER__TERRAFORM_WS=&lt;WORKSPACE_NAME&gt;\n</code></pre>"},{"location":"makefiles/terraform/#workspaces-choose-a-workspace-to-use","title":"Workspaces: choose a workspace to use","text":"<p>Terraform command: state list</p> <p>Select Terraform workspace defined by MAKESTER__TERRAFORM_WS.</p> <pre><code>make tf-ws-select MAKESTER__TERRAFORM_WS=&lt;WORKSPACE_NAME&gt;\n</code></pre>"},{"location":"makefiles/terraform/#remove-a-local-binding-to-an-existing-remote-object-without-first-destroying-it","title":"Remove a local binding to an existing remote object without first destroying it","text":"<p>Terraform command: state rm</p> <p>Remove a binding to an existing remote object without first destroying it. This makes Terraform \"forget\" the object while it continues to exist in the remote system.</p> <pre><code>make tf-pristine MAKESTER__TERRAFORM_RESOURCE=&lt;ADDRESS&gt;\n</code></pre> <p>Note</p> <p><code>ADDRESS</code> must be provided. Otherwise an error is generated.</p>"},{"location":"makefiles/terraform/#variables","title":"Variables","text":""},{"location":"makefiles/terraform/#makester__terraform_path","title":"<code>MAKESTER__TERRAFORM_PATH</code>","text":"<p>Switch to a different working directory before executing the given subcommand. Defaults to <code>$(MAKESTER__PROJECT_DIR)/terraform</code>.</p> <p>See Switching working directory with <code>-chdir</code>.</p>"},{"location":"makefiles/terraform/#makester__terraform_ws","title":"<code>MAKESTER__TERRAFORM_WS</code>","text":"<p>Control Terraform workspace context. Default is <code>default</code>.</p> <p>See Workspaces.</p>"},{"location":"makefiles/terraform/#makester__terraform_resource","title":"<code>MAKESTER__TERRAFORM_RESOURCE</code>","text":"<p>Name of an address to the Terraform commands that supports resource filtering.</p> <p>top</p>"},{"location":"makefiles/versioning/","title":"Versioning","text":"<p>Makester versioning provide two separate streams:</p> <p>Static:</p> <ul> <li>You manually control version increments in your <code>Makefile</code>. Makester versioning provides the variables <code>MAKESTER__VERSION</code> and <code>MAKESTER__RELEASE_NUMBER</code> for static version management.</li> </ul> <p>Dynamic:</p> <ul> <li>Leverages https://gitversion.net/.</li> </ul> <p>Either way, Makester versioning will pre-populate the <code>MAKESTER__RELEASE_VERSION</code> variable that you can use throughout your project.</p> <p>Note</p> <p>Dynamic versioning takes precedence over static. Makester versioning will first check if dynamic versioning output has been generated. The static version value will only be used as a fallback if the dynamic versioning value is not found.</p> <p>For dynamic versioning, GitVersion's defaults may be all that your project needs. But code versioning can be a touchy subject. Customising your own <code>GitVersion.yml</code> will give you full control over this facility. Follow the GitVersion configuration guide to initialise your own <code>GitVersion.yml</code>. Makester also provides a working, sample <code>GitVersion.yml</code> that is geared towards Python projects.</p> <p>The Makester versioning subsystem help lists the available commands:</p> <pre><code>make versioning-help\n</code></pre>"},{"location":"makefiles/versioning/#command-reference","title":"Command reference","text":""},{"location":"makefiles/versioning/#display-the-gitversion-usage-message","title":"Display the GitVersion usage message","text":"<pre><code>make gitversion\n</code></pre>"},{"location":"makefiles/versioning/#generate-dynamic-version","title":"Generate dynamic version","text":"<p>Makester v0.1.4</p> <p>The output is filtered against the GitVersion variable defined by <code>MAKESTER__GITVERSION_VARIABLE</code> (defaults to <code>AssemblySemFileVer</code>). For example:</p> <pre><code>### Filtering GitVersion variable: AssemblySemFileVer\n### MAKESTER__RELEASE_VERSION: \"0.1.0.0\"\n</code></pre> <p><code>gitversion-release</code> creates static output files under Makester's <code>MAKESTER__WORK_DIR</code>. These are namely:</p> <ul> <li><code>&lt;MAKESTER__WORK_DIR&gt;/versioning</code></li> <li>The complete GitVersion variable output in JSON format.</li> <li><code>&lt;MAKESTER__WORK_DIR&gt;/VERSION</code></li> <li>The filtered version that can be sourced throughout your project.</li> </ul> <p>If version currency is important for a particular function, then you can chain the <code>gitversion-release</code> target to other targets within your <code>Makefile</code>. For example, when you are building a fresh Docker image, the following recipe will ensure that a new <code>MAKESTER__RELEASE_NUMBER</code> is generated just prior to the Docker image build process:</p> <pre><code>image-build: gitversion-release\n</code></pre> <p>Makester versioning uses its own <code>GitVersion.yml</code> by default. However, you can specify your own by placing it at the top level of your project repository and setting <code>MAKESTER__GITVERSION_CONFIG</code> in your <code>Makefile</code>.</p>"},{"location":"makefiles/versioning/#dynamic-version-dump","title":"Dynamic Version Dump","text":"<p>A read-only variant of <code>gitversion-release</code> that will not clobber version content in <code>MAKESTER__VERSION_FILE</code>.</p> <pre><code>make gitversion-release-ro\n</code></pre>"},{"location":"makefiles/versioning/#clear-the-dynamic-gitversion-output","title":"Clear the Dynamic GitVersion Output","text":"<pre><code>make gitversion-clear\n</code></pre> <p>All files under <code>MAKESTER__WORK_DIR</code> are removed.</p>"},{"location":"makefiles/versioning/#variables","title":"Variables","text":""},{"location":"makefiles/versioning/#makester__version_file","title":"<code>MAKESTER__VERSION_FILE</code>","text":"<p>Configurable, static file reference to write the output of <code>gitversion-release</code> target (defaults to <code>$PWD/.makester/VERSION</code>).</p>"},{"location":"makefiles/versioning/#makester__gitversion_config","title":"<code>MAKESTER__GITVERSION_CONFIG</code>","text":"<p>Optionally specify the location of your project's <code>GitVersion.yml</code> (defaults to Makester's default <code>sample/GitVersion.yml</code>.</p>"},{"location":"makefiles/versioning/#makester__gitversion_variable","title":"<code>MAKESTER__GITVERSION_VARIABLE</code>","text":"<p>GitVersion release variable value filter (defaults to <code>AssemblySemFileVer</code>).</p>"},{"location":"makefiles/versioning/#makester__gitversion_version","title":"<code>MAKESTER__GITVERSION_VERSION</code>","text":"<p>GitVersion docker image version (defaults to <code>latest</code>).</p> <p>top</p>"},{"location":"makefiles/k8s/k8s/","title":"Minikube","text":"<p>Shakeout or debug your container services prior to deploying to Kubernetes.</p> <p>Note</p> <p>All Kubernetes manifests are expected to be in the <code>MAKESTER__K8_MANIFESTS</code> directory (defaults to <code>$MAKESTER__WORK_DIR/k8s/manifests</code>).</p> <p>Warning</p> <p>Care must be taken when managing multiple Kubernetes contexts. <code>kubectl</code> will operate against the active context.</p> <p>The Makester minikube subsystem is an optional facility as it requires binaries that you will need to install yourself. In the case of Kubernetes minikube, you can get the link to the installation notes to <code>minikube</code> with:</p> <pre><code>make print-MAKESTER__MINIKUBE_EXE_INSTALL\n</code></pre> <pre><code>print-MAKESTER__MINIKUBE_EXE_INSTALL=https://kubernetes.io/docs/tasks/tools/#minikube\n</code></pre> <p>For Kubernetes cluster interactions:</p> <pre><code>make print-MAKESTER__KUBECTL_EXE_INSTALL\n</code></pre> <pre><code>print-MAKESTER__KUBECTL_EXE_INSTALL=https://kubernetes.io/docs/tasks/tools/\n</code></pre> <p>The Makester minikube subsystem help lists the available commands:</p> <pre><code>make k8s-help\n</code></pre>"},{"location":"makefiles/k8s/k8s/#command-reference","title":"Command reference","text":""},{"location":"makefiles/k8s/k8s/#check-minikube-local-cluster-status","title":"Check Minikube local cluster status","text":"<pre><code>make mk-status\n</code></pre>"},{"location":"makefiles/k8s/k8s/#start-minikube-locally-and-create-a-cluster-docker-driver","title":"Start Minikube locally and create a cluster (<code>docker</code> driver)","text":"<pre><code>make mk-start\n</code></pre>"},{"location":"makefiles/k8s/k8s/#access-the-kubernetes-dashboard-ctrl-c-to-stop","title":"Access the Kubernetes dashboard (Ctrl-C to stop)","text":"<pre><code>make mk-dashboard\n</code></pre>"},{"location":"makefiles/k8s/k8s/#stop-minikube-local-cluster","title":"Stop Minikube local cluster","text":"<pre><code>make mk-stop\n</code></pre>"},{"location":"makefiles/k8s/k8s/#delete-minikube-local-cluster","title":"Delete Minikube local cluster","text":"<pre><code>make mk-del\n</code></pre>"},{"location":"makefiles/k8s/k8s/#get-service-access-details","title":"Get service access details","text":"<p>Note</p> <p>Only applicable if <code>LoadBalancer</code> type is specified in your Kubernetes manifest.</p> <pre><code>make mk-service\n</code></pre>"},{"location":"makefiles/k8s/k8s/#check-current-kubectl-context","title":"Check current <code>kubectl</code> context","text":"<pre><code>make kube-context\n</code></pre> <p>Note</p> <p>Current context name is delimited with the <code>*</code>:</p> <pre><code> CURRENT   NAME                CLUSTER             AUTHINFO                                          NAMESPACE\n           SupaAKSCluster      SupaAKSCluster      clusterUser_RESOURCE_GROUP_SupaAKSCluster\n *         minikube            minikube            minikube\n</code></pre>"},{"location":"makefiles/k8s/k8s/#change-kubectl-context","title":"Change <code>kubectl</code> context","text":"<pre><code>make kube-context-set MAKESTER__KUBECTL_CONTEXT=&lt;context-name&gt;\n</code></pre>"},{"location":"makefiles/k8s/k8s/#change-kubectl-to-the-minikube-context","title":"Change <code>kubectl</code> to the <code>minikube</code> context","text":"<pre><code>make kube-context-set\n</code></pre>"},{"location":"makefiles/k8s/k8s/#create-kubernetes-resources","title":"Create Kubernetes resource(s)","text":"<p>Builds all manifest files in <code>MAKESTER__K8_MANIFESTS</code> directory:</p> <pre><code>make kube-apply\n</code></pre>"},{"location":"makefiles/k8s/k8s/#delete-kubernetes-resources","title":"Delete Kubernetes resource(s)","text":"<p>Deletes all manifest files in <code>MAKESTER__K8_MANIFESTS</code> directory:</p> <pre><code>make kube-del\n</code></pre>"},{"location":"makefiles/k8s/k8s/#view-the-pods-and-services","title":"View the pods and services","text":"<pre><code>make kube-get\n</code></pre>"},{"location":"makefiles/k8s/k8s/#variables","title":"Variables","text":""},{"location":"makefiles/k8s/k8s/#makester__minikube_exe_name","title":"<code>MAKESTER__MINIKUBE_EXE_NAME</code>","text":"<p>The name of the binary Makester will search for in your <code>PATH</code> (defaults to <code>minikube</code>).</p> <p><code>MAKESTER__MINIKUBE_EXE_NAME</code> can be overridden if you have special requirements, or want to use a <code>minikube</code> executable that is not in your <code>PATH</code>. Just set <code>MAKESTER__MINIKUBE_EXE_NAME</code> to your preferred value in your <code>Makefile</code>:</p> <pre><code>MAKESTER__MINIKUBE_EXE_NAME := /opt/minikube/bin/minikube\n</code></pre>"},{"location":"makefiles/k8s/k8s/#makester__minikube_exe_install","title":"<code>MAKESTER__MINIKUBE_EXE_INSTALL</code>","text":"<p>URL link that provides the instructions for installing the <code>minikube</code> binary. To print the URL link:</p> <pre><code>make print-MAKESTER__MINIKUBE_EXE_INSTALL\n</code></pre>"},{"location":"makefiles/k8s/k8s/#makester__minikube","title":"<code>MAKESTER__MINIKUBE</code>","text":"<p>The path to the <code>minikube</code> binary as determined by Makester. Use <code>MAKESTER__MINIKUBE</code> for custom <code>minikube</code> commands in your own <code>Makefile</code>.</p> <p>Note</p> <p>Override <code>MAKESTER__MINIKUBE</code> has no effect as it is dynamically generated by Makester based on the value of <code>MAKESTER__MINIKUBE_EXE_NAME</code>.</p>"},{"location":"makefiles/k8s/k8s/#makester__kubectl_exe_name","title":"<code>MAKESTER__KUBECTL_EXE_NAME</code>","text":"<p>The name of the binary Makester will search for in your <code>PATH</code> (defaults to <code>kubectl</code>).</p> <p><code>MAKESTER__KUBECTL_EXE_NAME</code> can be overridden if you have special requirements, or want to use a <code>kubectl</code> executable that is not in your <code>PATH</code>. Just set <code>MAKESTER__KUBECTL_EXE_NAME</code> to your preferred value in your <code>Makefile</code>:</p> <pre><code>MAKESTER__KUBECTL_EXE_NAME := /opt/kubectl/bin/kubectl\n</code></pre>"},{"location":"makefiles/k8s/k8s/#makester__kubectl_exe_install","title":"<code>MAKESTER__KUBECTL_EXE_INSTALL</code>","text":"<p>URL link that provides the instructions for installing the <code>kubectl</code> binary. To print the URL link:</p> <pre><code>make print-MAKESTER__KUBECTL_EXE_INSTALL\n</code></pre>"},{"location":"makefiles/k8s/k8s/#makester__kubectl","title":"<code>MAKESTER__KUBECTL</code>","text":"<p>The path to the <code>kubectl</code> binary as determined by Makester. Use <code>MAKESTER__KUBECTL</code> for custom <code>kubectl</code> commands in your own <code>Makefile</code>.</p> <p>Note</p> <p>Override <code>MAKESTER__KUBECTL</code> has no effect as it is dynamically generated by Makester based on the value of <code>MAKESTER__KUBECTL_EXE_NAME</code>.</p> <p>top</p>"},{"location":"makefiles/k8s/kompose/","title":"Kubernetes Kompose","text":"<p>Convert Docker compose artifacts into container orchestrator manifests.</p> <p>The Makester kompose subsystem leverages Kubernetes <code>kompose</code> that provides tooling to assist in migrating Docker compose files to Kubernetes manifests.</p> <p>The Makester kompose subsystem is an optional facility as it requires binaries that you will need to install yourself. In the case of Kubernetes kompose, you can get the link to the installation notes with:</p> <pre><code>make print-MAKESTER__KOMPOSE_EXE_INSTALL\n</code></pre> <pre><code>MAKESTER__KOMPOSE_EXE_INSTALL=https://kompose.io/installation/\n</code></pre> <p>Makester will not stop you from exploring the kompose subsystem. However, if you attempt to invoke a target that requires a missing binary then you will receive an error. Makester will try to guide you along the way with detailed messages where possible. For example:</p> <pre><code>### MAKESTER__KOMPOSE: &lt;undefined&gt;\n### MAKESTER__KOMPOSE_EXE_NAME set as \"kompose\"\n### \"kompose\" not found\n### Install notes: https://kompose.io/installation/\nmakefiles/kompose.mk:18: *** ###.  Stop.\n</code></pre> <p>The Makester kompose subsystem help lists the available commands:</p> <pre><code>make kompose-help\n</code></pre>"},{"location":"makefiles/k8s/kompose/#command-reference","title":"Command reference","text":""},{"location":"makefiles/k8s/kompose/#translate-docker-compose-to-kubernetes-manifests","title":"Translate <code>docker compose</code> to Kubernetes manifests","text":"<pre><code>make kompose\n</code></pre>"},{"location":"makefiles/k8s/kompose/#variables","title":"Variables","text":""},{"location":"makefiles/k8s/kompose/#makester__kompose_exe_name","title":"<code>MAKESTER__KOMPOSE_EXE_NAME</code>","text":"<p>The name of the binary Makester will search for in your <code>PATH</code> (defaults to <code>kompose</code>).</p> <p><code>MAKESTER__KOMPOSE_EXE_NAME</code> can be overridden if you have special requirements, or want to use a <code>kompose</code> executable that is not in your <code>PATH</code>. Just set <code>MAKESTER__KOMPOSE_EXE_NAME</code> to your preferred value in your <code>Makefile</code>:</p> <pre><code>MAKESTER__KOMPOSE_EXE_NAME := /opt/kompose/bin/kompose\n</code></pre>"},{"location":"makefiles/k8s/kompose/#makester__kompose_exe_install","title":"<code>MAKESTER__KOMPOSE_EXE_INSTALL</code>","text":"<p>URL link that provides the instructions for installing the <code>kompose</code> binary. To print the URL link:</p> <pre><code>make print-MAKESTER__KOMPOSE_EXE_INSTALL\n</code></pre>"},{"location":"makefiles/k8s/kompose/#makester__kompose","title":"<code>MAKESTER__KOMPOSE</code>","text":"<p>The path to the <code>kompose</code> binary as determined by Makester. Use <code>MAKESTER__KOMPOSE</code> for custom <code>kompose</code> commands in your own <code>Makefile</code>.</p> <p>Note</p> <p>Override <code>MAKESTER__KOMPOSE</code> has no effect as it is dynamically generated by Makester based on the value of <code>MAKESTER__KOMPOSE_EXE_NAME</code>.</p>"},{"location":"makefiles/k8s/kompose/#makester__compose_k8s_ephemeral","title":"<code>MAKESTER__COMPOSE_K8S_EPHEMERAL</code>","text":"<p>Optionally specify the location of your project's <code>docker-compose.yml</code> (defaults to <code>docker-compose.yml</code> at the top level of the project).</p>"},{"location":"makefiles/k8s/kompose/#makester__k8s_manifests","title":"<code>MAKESTER__K8S_MANIFESTS</code>","text":"<p>Kubernetes manifest target output (defaults to <code>&lt;MAKESTER__WORK_DIR&gt;/k8s/manifests</code>).</p> <p>top</p>"},{"location":"makefiles/k8s/microk8s/","title":"MicroK8s","text":"<p>Makester v0.2.4</p> <p>MicroK8s is a lightweight Kubernetes implementation that is ideal for localised testing, experimentation and for shaking out production deployments.</p> <p>Note</p> <p>This Makester addon is not intended to be a replacement for full suite of MicroK8s commands. Rather, it is abstracting the most basic set of instructions required to get a minimal Kubernetes instance operational with minimal fuss.</p> <p>See the MicroK8s commands reference for the full suite of available commands. Similarly, <code>microk8s kubectl</code> provides the list of commands to run against the Kubernetes cluster.</p>"},{"location":"makefiles/k8s/microk8s/#getting-started","title":"Getting started","text":"<p>If managing <code>Makefile</code> includes manually, you must append <code>microk8s</code> to <code>MAKESTER__INCLUDES</code> to enable the Makester MicroK8s subsystem.</p> <p>Start by checking the MicroK8s status:</p> MicroK8s status: pristine environment.<pre><code>make microk8s-status\n</code></pre> <p>If the <code>microk8s</code> executable is not found, then a link to the installation notes is displayed as follows:</p> MicroK8s not installed.<pre><code>### Checking MicroK8s status ...\n### MAKESTER__MICROK8S: &lt;undefined&gt;\n### MAKESTER__MICROK8S_EXE_NAME set as \"microk8ss\"\n### \"microk8s\" not found\n### Install notes: https://microk8s.io/docs/getting-started\nmakefiles/microk8s.mk:16: *** ###.  Stop.\n</code></pre> <p>Install Microk8s suited to your platform.</p> <p>MacOS users will need to also install Multipass:</p> Install Multipass.<pre><code>### Checking MicroK8s status ...\nYou need 'multipass' set-up to build snaps: https://multipass.run.\ngmake: *** [makefiles/microk8s.mk:19: _uk8s-cmd] Error 2\n</code></pre> <p>To start the essential Kubernetes services with minimal fuss:</p> Quick start convenience target.<pre><code>make microk8s-up\n</code></pre> <p>Note</p> <p>For multipass deployments, it is possible to configure the underlying VM resources that are passed to the <code>microk8s install</code> command via the available <code>MUTLIPASS_*</code> settings. The default arrangement is as follows:</p> <pre><code>make microk8s-up MULTIPASS_CPU=2 MULTIPASS_MEMORY=4 MULTIPASS_DISK=50 MULTIPASS_CHANNEL=\"1.28/stable\" MULTIPASS_IMAGE=22.04\n</code></pre> <p><code>make microk8s-up</code> should cater for the majority of scenarios. However, Makester also provides more granular targets that allow you to customise and explore the Kubernetes cluster.</p> <p>To clean up all resources:</p> Clean up all resources.<pre><code>make microk8s-down\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#command-reference","title":"Command reference","text":""},{"location":"makefiles/k8s/microk8s/#all-in-one-kubernetes-service-starter","title":"All-in-one Kubernetes service starter","text":"<p>A convenience target to start the most essential Kubernetes services, such as DNS, and provide access to the Kubernetes dashboard:</p> <pre><code>make microk8s-up\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#all-in-one-kubernetes-service-stopper","title":"All-in-one Kubernetes service stopper","text":"<p>Restore the MicroK8s to original state and release all resources:</p> <pre><code>make microk8s-down\n</code></pre> <p>Note</p> <p>For Multipass environments, this target will also stop the underlying <code>microk8s-vm</code>.</p>"},{"location":"makefiles/k8s/microk8s/#start-microk8s","title":"Start MicroK8s","text":"<p>Start a local, lightweight Kubernetes:</p> <pre><code>make microk8s-start\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#wait-for-microk8s-services-to-initialise","title":"Wait for MicroK8s services to initialise","text":"<p>In addition to the <code>microk8s status</code> target, this alternate status target will wait until all of the Kubernetes targets are ready:</p> <pre><code>make microk8s-wait\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#microk8s-version","title":"MicroK8s version","text":"<p>Print the installed MicroK8s version and revision number:</p> <pre><code>make microk8s-version\n</code></pre> MicroK8s version sample output.<pre><code>Client Version: v1.26.3\nKustomize Version: v4.5.7\nServer Version: v1.26.3\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#start-the-microk8s-kubernetes-dashboard","title":"Start the MicroK8s Kubernetes dashboard","text":"<p>This MicroK8s Kubernetes dashboard variant is non-blocking and can be used in pipelines and scripts. It will automatically enable the dashboard addon:</p> <pre><code>make microk8s-dashboard\n</code></pre> <p>The output will contain the URL to the Kubernetes dashboard in addition to a token that can be used to authenticate to the service. For example:</p> Sample Kubernetes dashboard URL and token.<pre><code>...\n### Kubernetes dashboard address forwarded to: https://192.168.1.211:19443\n### Kubernetes dashboard log output can be found at .makester/microk8s-dashboard.out\n2023-04-09 13:57:19 logga [INFO]: Checking host:port 192.168.1.211:19443 MicroK8s Kubernetes dashboard ...\n2023-04-09 13:57:20 logga [INFO]: Port 19443 ready\n### Login to the MicroK8s Kubernetes dashboard with following token:\neyJhbGciOiJSUzI1NiIsImtpZCI6InlBTFNTTnpVQV8yQnBEeWh4MUNSc1lRZnZrWkZBVnZwVlAweHhMSS00ZlUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJtaWNyb2s4cy1kYXNoYm9hcmQtdG9rZW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImFiNDM0N2NkLTZmZTMtNGNlMi05YWY2LTFjZmE5MDM3YzdlZSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTpkZWZhdWx0In0.rpQofpXupJP9Dyk4vEWu1C_SivfDZXAXrCjU_TfsQ3MewjEj18PM43WVrodQ6fBounnt0HpFKiD9y6ImGqRipHz4Xmzd1gNEJp8fJydsOgYT42YnUKwMMHYFSQPQAxWVphL9B8xfNv9okFGv8DoeiXfSS2mA-jZtUPexHBB474D7yNz5lfwJQh1o7qGj3q0w7qMJibmM0lCE2Om2Eloar1QlV188YExab8l1RYG3RCMWcRWprGsYuuPGV4CDAjeK1ediiH-OzXmT5e8qIaVkHbUgvZZUObQ8GDYoeWMETHBj6nqVtRHOGuBvsxO6IhHTiC09EZasiR4zlYJHJtUHhA\n</code></pre> <p>Enter the token at the Kubernetes dashboard login screen: </p>"},{"location":"makefiles/k8s/microk8s/#enable-the-kubernetes-dashboard-addon","title":"Enable the Kubernetes dashboard addon","text":"<p>See for Addon: dashboard for more information:</p> <pre><code>make microk8s-addon-dashboard\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#regenerate-the-microk8s-kubernetes-dashboard-authentication-token","title":"Regenerate the MicroK8s Kubernetes dashboard authentication token","text":"<p>The MicroK8s Kubernetes dashboard will timeout the login after a period of inactivity. Regenerate the token with:</p> <pre><code>make microk8s-dashboard-creds\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#start-the-microk8s-kubernetes-dashboard-proxy","title":"Start the MicroK8s Kubernetes dashboard proxy","text":"<p>This is a CLI-blocking variant of <code>make microk8s-dashboard</code>. Use <code>Ctrl-C</code> to terminate.</p> <p>See microk8s dashboard-proxy for more information:</p> <pre><code>make microk8s-dashboard-proxy\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#list-active-namespaces-in-the-kubernetes-cluster","title":"List active namespaces in the Kubernetes cluster","text":"<p>This <code>kubectl</code> command lists the current active namespaces:</p> <pre><code>make microk8s-namespaces\n</code></pre>"},{"location":"makefiles/k8s/microk8s/#variables","title":"Variables","text":""},{"location":"makefiles/k8s/microk8s/#microk8s_dashboard_port","title":"<code>MICROK8S_DASHBOARD_PORT</code>","text":"<p>The MicroK8s Kubernetes dashboard port (default <code>&lt;19443&gt;</code>).</p> <p>top</p>"}]}